name: build
on:
  push:
  pull_request:
  workflow_dispatch:
permissions: {}
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends clang-15 clang-format-15 lcov libboost-dev libmbedtls-dev lld-15 llvm-15 ninja-build
          sudo pip install meson
      - name: Download VPP
        uses: actions/checkout@v4
        with:
          repository: FDio/vpp
          ref: v23.06
          path: vpp
      - name: Install libmemif
        run: |
          cd $HOME
          mv $GITHUB_WORKSPACE/vpp $HOME/
          mkdir libmemif-build && cd libmemif-build
          cmake -G Ninja ../vpp/extras/libmemif
          ninja
          sudo ninja install
      - uses: actions/checkout@v4
      - name: Check meson.build lists and code style
        run: |
          mk/update-list.sh
          mk/format-code.sh
          git diff --exit-code
      - name: Build and test with coverage
        run: |
          meson setup -Db_coverage=true -Dwerror=true -Dunittest=enabled -Dprograms=disabled build.coverage
          cd build.coverage
          if ! meson test; then
            cat meson-logs/testlog.txt && false
          fi
          ninja coverage
          lcov --extract meson-logs/coverage.info $(readlink -f ../src)'/*' > coverage.lcov
      - name: Build and test with sanitizer
        run: |
          meson setup -Db_sanitize=address,undefined -Dunittest=enabled -Dprograms=enabled build.sanitize
          cd build.sanitize
          if ! meson test; then
            cat meson-logs/testlog.txt && false
          fi
      - name: Build and test with LLVM
        run: |
          LDFLAGS='-fuse-ld=lld-15 -L/usr/local/lib' meson setup --native-file mk/native-llvm.ini --buildtype debugoptimized -Db_ndebug=true -Dwerror=true -Dunittest=enabled -Dprograms=enabled build.llvm
          cd build.llvm
          if ! meson test; then
            cat meson-logs/testlog.txt && false
          fi
      - uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: build.coverage/coverage.lcov
  arduino:
    runs-on: ubuntu-22.04
    steps:
      - uses: arduino/setup-arduino-cli@v1
      - id: cores
        name: Refresh Arduino cores
        run: |
          echo 'https://arduino.esp8266.com/stable/package_esp8266com_index.json,https://espressif.github.io/arduino-esp32/package_esp32_index.json,https://adafruit.github.io/arduino-board-index/package_adafruit_index.json' > ~/arduino-cores.txt
          arduino-cli version
          arduino-cli update --additional-urls "$(<~/arduino-cores.txt)"
          echo d=$(sha256sum ~/.arduino15/package_*index.json | sha256sum | cut -d' ' -f1) >> $GITHUB_OUTPUT
      - name: Cache Arduino cores
        uses: actions/cache@v4
        with:
          path: ~/.arduino15/staging/packages
          key: cores-${{ steps.cores.outputs.d }}
      - name: Install Arduino cores
        run: |
          arduino-cli core install esp8266:esp8266 esp32:esp32 adafruit:nrf52 --additional-urls "$(<~/arduino-cores.txt)"
          arduino-cli lib install ArduinoUnit
      - name: Install dependencies
        run: |
          sudo pip install adafruit-nrfutil
      - uses: actions/checkout@v4
      - name: Prepare Arduino libraries
        run: |
          mkdir -p $HOME/Arduino/libraries
          ln -s $GITHUB_WORKSPACE $HOME/Arduino/libraries/NDNph
      - name: Compile examples
        run: |
          for B in esp8266:esp8266:nodemcuv2 esp32:esp32:esp32wrover esp32:esp32:esp32c3 adafruit:nrf52:feather52832; do
            for E in $(find ./examples -name '*.ino' -printf '%h\n'); do
              printf "\n----\033[1;35m Build %s in %s \033[0m----\n" ${E##*/} $B
              arduino-cli compile -b $B --warnings more $E
            done
          done
