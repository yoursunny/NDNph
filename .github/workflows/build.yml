name: build
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: install dependencies
        run: |
          sudo apt-get install --no-install-recommends clang-8 clang-format-8 lcov libboost-dev lld-8 llvm-8 ninja-build
          python -m pip install --upgrade pip
          pip install cmake meson
      - name: download Google Test
        uses: actions/checkout@v2
        with:
          repository: google/googletest
          ref: 2d924d7a971e9667d76ad09727fb2402b4f8a1e3
          path: googletest
      - name: install Google Test
        run: |
          cd $HOME
          mv $GITHUB_WORKSPACE/googletest $HOME/
          mkdir gtest-build && cd gtest-build
          cmake -G Ninja ../googletest
          ninja
          sudo ninja install
      - name: download Mbed TLS
        uses: actions/checkout@v2
        with:
          repository: ARMmbed/mbedtls
          ref: v2.16.11
          path: mbedtls
      - name: install Mbed TLS
        run: |
          cd $HOME
          mv $GITHUB_WORKSPACE/mbedtls $HOME/
          mkdir mbedtls-build && cd mbedtls-build
          cmake -G Ninja ../mbedtls -DENABLE_PROGRAMS=0 -DENABLE_TESTING=0
          ninja
          sudo ninja install
      - name: download VPP
        uses: actions/checkout@v2
        with:
          repository: FDio/vpp
          ref: v21.01.1
          path: vpp
      - name: install libmemif
        run: |
          cd $HOME
          mv $GITHUB_WORKSPACE/vpp $HOME/
          mkdir libmemif-build && cd libmemif-build
          cmake -G Ninja ../vpp/extras/libmemif
          ninja
          sudo ninja install
      - uses: actions/checkout@v2
      - name: check meson.build lists and code style
        run: |
          mk/update-list.sh
          mk/format-code.sh
          [[ $(git status --porcelain | tee >(cat 1>&2) | wc -l) -eq 0 ]]
      - name: build and test with coverage
        run: |
          meson build.coverage -Db_coverage=true -Dwerror=true -Dunittest=enabled -Dprograms=disabled
          cd build.coverage
          if ! ninja test; then
            cat meson-logs/testlog.txt
            false
          fi
          ninja coverage
          lcov --extract meson-logs/coverage.info $(readlink -f ../src)'/*' > coverage.lcov
      - name: build and test with sanitizer
        run: |
          meson build.sanitize -Db_sanitize=address,undefined -Dunittest=enabled -Dprograms=enabled
          cd build.sanitize
          if ! ninja test; then
            cat meson-logs/testlog.txt
            false
          fi
      - name: build and test with LLVM
        run: |
          LDFLAGS='-fuse-ld=lld -L/usr/local/lib' meson build.llvm --native-file mk/native-llvm.txt --buildtype debugoptimized -Dunittest=enabled -Dprograms=enabled
          cd build.llvm
          if ! ninja test; then
            cat meson-logs/testlog.txt
            false
          fi
      - uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: build.coverage/coverage.lcov
  arduino:
    runs-on: ubuntu-20.04
    steps:
      - uses: arduino/setup-arduino-cli@v1.1.1
      - name: install Arduino cores and libraries
        run: |
          arduino-cli version
          arduino-cli core update-index --additional-urls $ARDUINO_CORE_URI
          arduino-cli core install esp8266:esp8266 esp32:esp32 adafruit:nrf52 --additional-urls $ARDUINO_CORE_URI
          arduino-cli lib update-index
          arduino-cli lib install ArduinoUnit
        env:
          ARDUINO_CORE_URI: https://arduino.esp8266.com/stable/package_esp8266com_index.json,https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json,https://www.adafruit.com/package_adafruit_index.json
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install adafruit-nrfutil esptool
      - uses: actions/checkout@v2
      - name: link library
        run: |
          mkdir -p $HOME/Arduino/libraries
          ln -s $GITHUB_WORKSPACE $HOME/Arduino/libraries/NDNph
      - name: compile in ESP8266
        run: |
          arduino-cli compile -b esp8266:esp8266:nodemcuv2 ./examples/unittest
      - name: compile in ESP32
        run: |
          arduino-cli compile -b esp32:esp32:esp32wrover ./examples/unittest
      - name: compile in nRF52
        run: |
          arduino-cli compile -b adafruit:nrf52:feather52832 ./examples/unittest
